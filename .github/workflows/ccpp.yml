name: C/C++ CI

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: Ninja
      CTEST_OUTPUT_ON_FAILURE: ON

    strategy:
        fail-fast: false
        matrix:
          name: [
            ubuntu-latest-gcc-9,
            ubuntu-latest-clang-9,
            windows-2019-cl,
            macOS-latest-gcc-9,
            macOS-latest-xcode-11.0
          ]

          include:
            - name: ubuntu-latest-gcc-9
              os: ubuntu-latest
              compiler: gcc
              version: "9"

            - name: ubuntu-latest-clang-9
              os: ubuntu-latest
              compiler: clang
              version: "9"

            - name: windows-2019-cl
              os: windows-2019
              compiler: cl

            - name: macOS-latest-gcc-9
              os: macOS-latest
              compiler: gcc
              version: "9"

            - name: macOS-latest-xcode-11.0
              os: macOS-latest
              compiler: xcode
              version: "11"

    steps:
    - uses: actions/checkout@v1
    - name: Install (Linux)
      if: runner.os == 'Linux'
      run: |
        curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz -o cmake.tar.gz
        sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

        # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
        if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
          sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
        fi
        sudo apt-get update
        sudo apt-get install -y ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
        else
          sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
          echo "::set-env name=CC::clang-${{ matrix.version }}"
          echo "::set-env name=CXX::clang++-${{ matrix.version }}"
        fi

    - name: Install (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake ninja
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc@${{ matrix.version }}
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
        else
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang++"
        fi

    - name: Install (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop install ninja --global

        echo "::set-env name=CC::${{ matrix.compiler }}"
        echo "::set-env name=CXX::${{ matrix.compiler }}"

        echo "::set-env name=PATH::$env:PATH"
        .github\workflows\vsenv.bat -arch=amd64 -host_arch=amd64

    - name: Build
      run: |
        git submodule update --init --recursive
        cmake -E remove_directory build
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        cmake --build build

    - name: Test
      run: |
        cd build
        ctest
